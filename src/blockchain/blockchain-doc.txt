package blockchain // import "blockchain/blockchain"


CONSTANTS

const TARGET = 20
    TARGET - A valid block hash has its first TARGET bits be zero.


FUNCTIONS

func GenerateKey() *rsa.PrivateKey
    GenerateKey - Generate a new rsa key pair.

func Hash(object any) []byte
    Hash - Hash any object to []byte with sha256 (256 bits).

func PublicKeyFromBytes(buffer []byte) (*rsa.PublicKey, error)
    PublicKeyFromBytes - De-serialize []byte to a public key.

func PublicKeyToBytes(publicKey *rsa.PublicKey) []byte
    PublicKeyToBytes - Serialize a public key to []byte.

func Sign(privateKey *rsa.PrivateKey, object any) []byte
    Sign - Sign an arbitrary object with a private key.

func Verify(publicKey *rsa.PublicKey, object any, signature []byte) bool
    Verify - Checks whether the signature is produced by signing object with the
    public key's private key.


TYPES

type Block struct {
	Header BlockHeader
	Posts  []Post // all posts contained in this block
}
    Block - A block in the blockchain

func (b *Block) EncodeBase64() BlockBase64
    EncodeBase64 - encode a Block to a BlockBase64

func (b *Block) Verify() bool
    Verify - verifies if this block is valid on its own. This does not consider
    other blocks in the same blockchain.

type BlockBase64 struct {
	PrevHash  string       `json:"prev-hash"`
	Summary   string       `json:"summary"`
	Timestamp int64        `json:"timestamp"`
	NPosts    int          `json:"n-posts"`
	Nonce     uint32       `json:"nonce"`
	Posts     []PostBase64 `json:"posts"`
}
    BlockBase64 - base64-encoded Block to support marshalling to json It is the
    same as Block except all []byte are encoded as base64 strings.

func (b *BlockBase64) DecodeBase64() (Block, error)
    DecodeBase64 - decode a BlockBase64 to a Block

type BlockHeader struct {
	PrevHash  []byte // the identity hash of the previous block in a blockchain
	Summary   []byte // hash of Posts
	Timestamp int64
	Nonce     uint32 // miners find the correct Nonce when mining
}
    BlockHeader - Part of Block used to generate the block identity hash (the
    target of mining).

type Post struct {
	User      *rsa.PublicKey // user's public key
	Signature []byte         // generated by signing Body with User
	Body      PostBody       // the content of the post
}
    Post - A user's message to be sent to the blockchain.

func (p *Post) EncodeBase64() PostBase64
    EncodeBase64 - encode a Post to PostBase64.

func (p *Post) Verify() bool
    Verify - verifies the Post's signature matches its public key and body.

type PostBase64 struct {
	User      string `json:"user"`
	Content   string `json:"content"`
	Timestamp int64  `json:"timestamp"`
	Signature string `json:"signature"`
}
    PostBase64 - base64-encoded Post to support marshalling to json. It is the
    same as Post except all []byte are encoded as base64 strings.

func (p *PostBase64) DecodeBase64() (Post, error)
    DecodeBase64 - decode a PostBase64 to a Post.

type PostBody struct {
	Content   string
	Timestamp int64
}
    PostBody - Part of Post used to generate a signature.

